spk-reserv:
    Add
    do
    while
    for
    if
    else
    else if
    try
    catch
    length()
    Array()
    toStr()
    toInt()
    toFloat()
    toByte()
    toShort()
    toLong()
    toDouble()
    strReplace()
    strSplit()
    out
    input
    var
    Null
    True
    False
    fun
    class
    struct
    protected:
    private:
    stop
    continue
    switch
    case
    enum
    ref
    return
    this
    throw
    selref
    io
    io.clear()
    length(obj)
    exec(str)
    eval(str)
    createVariable()
    getVariable()
    destruct()
    ;
stl:
    typeof()
    sleep()
    theard
    theard.start(ref func)
    theard.getName(theard)
    theard.setNAme(theardname)
    theard.getPriority(theard)
    theard.getPriority(theard priority)
    theard.theardsUnbind()
    async
    async.supply(ref func)
    downloadWithURL()
    dt
    dt.getSeconds()
    dt.getMinutes()
    dt.GetHours()
    dt.DayWeek()
    dt.getDate()
    dt.getMonth()
    dt.getYear()
    effects
    effects.normal()
    effects.bold()
    effects.light()
    effects.italic()
    effects.underline()
    effects.blink()
    color
    color.reset()
    color.black()
    color.red()
    color.green()
    color.yellow()
    color.purple()
    color.cyan()
    color.white()
    backcolor
    backcolor.reset()
    backcolor.black()
    backcolor.red()
    backcolor.green()
    backcolor.yellow()
    backcolor.purple()
    backcolor.cyan()
    backcolor.white()
    dir
    dir.create()
    dir.delete()
    dir.isEmpty()
    dir.list()
    str
    str.replace()
    str.split()
    str.chars()
    str.bychars()
    str.empty()
    char
    char.isvalid()
    process
    process.start()
    process.exit()
    file
    file.create()
    file.read()
    file.write()
    file.append()
    math
    math.sin()
    math.cos()
    math.tan()
    math.sqrt()
    math.cbrt()
    math.round()
    math.round()
    math.random()
    math.Degrees(v)
    math.toRadians(v)
    math.tanh(v)
    math.cosh(v)
    math.acos(v)
    math.atan(v)
    math.asin(v)
    math.abs(v)
    math.exp(v)
    math.log(v)
    math.log1p(v)
    math.log10(v)
    math.isNegative(v)
    math.isPositive(v)
    math.isZero(v)
    math.numType(v)
    math.PI
    math.E
    ;
jrt:
    jrt
    jrt.translate(fun_name [])
    jrt.call(fun_name args)
    ;
json:
    json
    json.get()
    json.write()
    ;
spkuint:
    spkunit
    spkunit.startTimer()
    spkinit.stopTimer()
    spkunit.assertEquals()
    spkunit.assertNotEquals()
    spkunit.assertNull()
    spkunit.assertTrue()
    spkunit.point()
    spkunit.getLog()
    spkunit.clearLog()
    ;
zip:
    zip
    zip.create()
    zip.unpack()
    ;
CanvasAPI:
    Canvas()
    Promt()
    keypressed
    mousehover
    line()
    oval()
    foval()
    rect()
    frect()
    clip
    drawstr()
    setcolor()
    redraw()
    ;
